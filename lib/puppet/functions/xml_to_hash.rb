# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'xmlsimple'

# ---- original file header ----
#
# @summary
#     Function to convert an xml file into a hash via xml-simple
#
#  @param [String] xml Local file name to be passed into XmlSimple.xml_in
#  @param [Hash] options (optional) second parameter will be passed into XmlSimple.xml_in
#  @return [Hash] data are converted from xml
#
#
Puppet::Functions.create_function(:xml_to_hash) do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end

  def default_impl(*args)
    if args.empty? || args.length > 2
      raise Puppet::Error, "#xml_to_hash accepts only one(1) or two(2) arguments, you passed #{args.length}"
    end

    if args[0].class != String
      raise Puppet::Error, "#xml_to_hash accepts a String first argument (path to a file to parse), you passed a #{args[0].class}"
    end
    if args.length > 1 && args[1].class != Hash
      raise Puppet::Error, "#xml_to_hash accepts a hash second argument (options), you passed a #{args[0].class}"
    end

    unless File.file?(args[0]) || File.readable?(args[0])
      raise Puppet::Error, "#xml_to_hash cannot read the file #{args[0]}"
    end

    if args.length == 1
      XmlSimple.xml_in(args[0])
    else
      XmlSimple.xml_in(args[0], args[1])
    end
  end
end
